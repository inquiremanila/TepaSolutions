import { jsx } from 'react/jsx-runtime';
import { HelmetProvider } from 'react-helmet-async';
import { r as render, h as hydrate, d as documentReady } from '../shared/vite-react-ssg.BxjO14Et.mjs';
export { C as ClientOnly, H as Head } from '../shared/vite-react-ssg.BxjO14Et.mjs';
import { d as deserializeState } from '../shared/vite-react-ssg.C6pK7rvr.mjs';
import 'react';
import 'react-dom';

function ViteReactSSG(App, fn, options = {}) {
  const {
    transformState,
    rootContainer = "#root",
    ssrWhenDev,
    getStyleCollector = null
  } = options;
  if (process.env.NODE_ENV === "development" && ssrWhenDev !== void 0)
    console.warn("[vite-react-ssg] `ssrWhenDev` option is no longer needed. If you want to use csr, just replace `vite-react-ssg dev` with `vite`.");
  const isClient = typeof window !== "undefined";
  async function createRoot(client = false, routePath) {
    const appRenderCallbacks = [];
    const onSSRAppRendered = client ? () => {
    } : (cb) => appRenderCallbacks.push(cb);
    const triggerOnSSRAppRendered = () => {
      return Promise.all(appRenderCallbacks.map((cb) => cb()));
    };
    const context = {
      isClient,
      onSSRAppRendered,
      triggerOnSSRAppRendered,
      initialState: {},
      transformState,
      routePath,
      getStyleCollector,
      routes: void 0,
      routerOptions: void 0,
      base: "/",
      app: App,
      routerType: "single-page"
    };
    if (client) {
      await documentReady();
      context.initialState = transformState?.(window.__INITIAL_STATE__ || {}) || deserializeState(window.__INITIAL_STATE__);
    }
    await fn?.(context);
    const initialState = context.initialState;
    return {
      ...context,
      initialState
    };
  }
  if (isClient) {
    (async () => {
      const container = typeof rootContainer === "string" ? document.querySelector(rootContainer) : rootContainer;
      if (!container) {
        if (typeof $jsdom === "undefined")
          console.warn("[vite-react-ssg] Root container not found.");
        return;
      }
      const context = await createRoot(true);
      window.__VITE_REACT_SSG_CONTEXT__ = context;
      const app = /* @__PURE__ */ jsx(HelmetProvider, { children: App });
      const isSSR = document.querySelector("[data-server-rendered=true]") !== null;
      if (!isSSR && process.env.NODE_ENV === "development") {
        render(app, container, options);
      } else {
        hydrate(app, container, options);
      }
    })();
  }
  return createRoot;
}

export { ViteReactSSG };
