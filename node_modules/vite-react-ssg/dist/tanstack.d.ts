import { AnyRouter } from '@tanstack/react-router';
import { V as ViteReactSSGContext$1, a as ViteReactSSGClientOptions } from './shared/vite-react-ssg.B2xAADcy.js';
export { C as CrittersOptions, I as IndexRouteRecord, N as NonIndexRouteRecord, R as RouteRecord, c as RouterFutureConfig, S as StyleCollector, b as ViteReactSSGOptions } from './shared/vite-react-ssg.B2xAADcy.js';
export { C as ClientOnly, H as Head } from './shared/vite-react-ssg.-NlgsPvg.js';
import 'beasties';
import 'react';
import 'react-router-dom';
import 'react-helmet-async';

declare function registerPaths(id: string, getStaticPaths: () => string[] | Promise<string[]>): void;

interface RouterOptions {
    router: AnyRouter;
    routes: AnyRouter['routeTree'];
    basename?: string;
}
type ViteReactSSGContext<HasRouter extends boolean = true> = Omit<ViteReactSSGContext$1, 'router' | 'routerType'> & {
    router: HasRouter extends true ? AnyRouter : undefined;
    routeTree?: AnyRouter['routeTree'];
    routerType: 'tanstack';
};
declare function Experimental_ViteReactSSG(routerOptions: RouterOptions, fn?: (context: ViteReactSSGContext<true>) => Promise<void> | void, options?: ViteReactSSGClientOptions): (client?: boolean, routePath?: string) => Promise<ViteReactSSGContext<true>>;
declare global {
    interface Window {
        __VITE_REACT_SSG_STATIC_LOADER_DATA__: any;
        __VITE_REACT_SSG_HASH__: string;
        __VITE_REACT_SSG_CONTEXT__: ViteReactSSGContext<true>;
    }
}

export { Experimental_ViteReactSSG, type RouterOptions, ViteReactSSGClientOptions, type ViteReactSSGContext, registerPaths };
