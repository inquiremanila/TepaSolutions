const ViteReactSSGTanstackRouterStaticPathsContext = {};
function registerPaths(id, getStaticPaths) {
  ViteReactSSGTanstackRouterStaticPathsContext[id] = getStaticPaths;
}
async function convertRouteTreeToRouteOption(routeTree, client, visitNode) {
  const routes = [];
  async function traverseRouteTree(node) {
    if (!client && node.path?.includes("$") && node.lazyFn) {
      await node.lazyFn();
    }
    visitNode?.(node);
    const routeRecord = {
      path: node.path,
      getStaticPaths: ViteReactSSGTanstackRouterStaticPathsContext[node.id]
    };
    routeRecord.path = routeRecord.path?.replaceAll("$", ":");
    const children = node.children;
    if (children) {
      routeRecord.children = [];
      for (const child of Object.values(children)) {
        routeRecord.children.push(await traverseRouteTree(child));
      }
    }
    return routeRecord;
  }
  routes.push(await traverseRouteTree(routeTree));
  return routes;
}
const META_CONTAINER_ID = "__SSG_TANSTACK_META_CONTAINER__";

export { META_CONTAINER_ID as M, convertRouteTreeToRouteOption as c, registerPaths as r };
