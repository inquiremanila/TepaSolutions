import React, { useState, useEffect, isValidElement } from 'react';
import * as ReactDOM from 'react-dom';
import { jsx, Fragment } from 'react/jsx-runtime';
import { Helmet } from 'react-helmet-async';

const CopyReactDOM = {
  ...ReactDOM
};
const { version, render: reactRender, hydrate: reactHydrate } = CopyReactDOM;
const isReact18 = Number((version || "").split(".")[0]) > 17;
const isReact19 = Number((version || "").split(".")[0]) > 18;
function render(app, container, renderOptions = {}) {
  const { useLegacyRender } = renderOptions;
  if (useLegacyRender || !isReact18) {
    reactRender(app, container);
  } else if (isReact19) {
    import('react-dom/client').then(({ default: { createRoot } }) => {
      const root = createRoot(container);
      React.startTransition(() => {
        root.render(app);
      });
    });
  } else {
    CopyReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = true;
    const { createRoot } = CopyReactDOM;
    if (!createRoot) {
      throw new Error("createRoot not found");
    }
    const root = createRoot(container);
    CopyReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = false;
    React.startTransition(() => {
      root.render(app);
    });
  }
}
function hydrate(app, container, renderOptions = {}) {
  const { useLegacyRender } = renderOptions;
  if (useLegacyRender || !isReact18) {
    reactHydrate(app, container);
  } else if (isReact19) {
    import('react-dom/client').then(({ default: { hydrateRoot } }) => {
      React.startTransition(() => {
        hydrateRoot(container, app);
      });
    });
  } else {
    CopyReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = true;
    const { hydrateRoot } = CopyReactDOM;
    if (!hydrateRoot) {
      throw new Error("hydrateRoot not found");
    }
    React.startTransition(() => {
      hydrateRoot(container, app);
      CopyReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = false;
    });
  }
}

function documentReady(_passThrough) {
  if (document.readyState === "loading") {
    return new Promise((resolve) => {
      document.addEventListener("DOMContentLoaded", () => resolve(_passThrough));
    });
  }
  return Promise.resolve(_passThrough);
}

function useIsClient() {
  const [isBrowser, setIsBrowser] = useState(false);
  useEffect(() => {
    setIsBrowser(true);
  }, []);
  return isBrowser;
}

function ClientOnly({
  children,
  fallback
}) {
  const isBrowser = useIsClient();
  if (isBrowser) {
    if (typeof children !== "function" && process.env.NODE_ENV === "development") {
      throw new Error(
        `vite-react-ssg error: The children of <ClientOnly> must be a "render function", e.g. <ClientOnly>{() => <span>{window.location.href}</span>}</ClientOnly>.
Current type: ${isValidElement(children) ? "React element" : typeof children}`
      );
    }
    return /* @__PURE__ */ jsx(Fragment, { children: children?.() });
  }
  return fallback ?? null;
}

function Head(props) {
  return /* @__PURE__ */ jsx(Helmet, { ...props });
}

export { ClientOnly as C, Head as H, documentReady as d, hydrate as h, render as r };
